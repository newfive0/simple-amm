/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AMMPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "liquidity"
      | "removeLiquidity"
      | "reserveETH"
      | "reserveSimplest"
      | "simplestToken"
      | "swap"
      | "totalLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LiquidityAdded" | "LiquidityRemoved" | "Swap"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveSimplest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "simplestToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserveETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveSimplest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simplestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    provider: AddressLike,
    amountSimplest: BigNumberish,
    amountETH: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    amountSimplest: bigint,
    amountETH: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    provider: string;
    amountSimplest: bigint;
    amountETH: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [
    provider: AddressLike,
    amountSimplest: BigNumberish,
    amountETH: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    amountSimplest: bigint,
    amountETH: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    provider: string;
    amountSimplest: bigint;
    amountETH: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenIn: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenIn: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenIn: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AMMPool extends BaseContract {
  connect(runner?: ContractRunner | null): AMMPool;
  waitForDeployment(): Promise<this>;

  interface: AMMPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [amountSimplest: BigNumberish],
    [bigint],
    "payable"
  >;

  liquidity: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  removeLiquidity: TypedContractMethod<
    [liquidityShare: BigNumberish],
    [[bigint, bigint] & { amountSimplest: bigint; amountETH: bigint }],
    "nonpayable"
  >;

  reserveETH: TypedContractMethod<[], [bigint], "view">;

  reserveSimplest: TypedContractMethod<[], [bigint], "view">;

  simplestToken: TypedContractMethod<[], [string], "view">;

  swap: TypedContractMethod<
    [tokenIn: AddressLike, amountIn: BigNumberish],
    [bigint],
    "payable"
  >;

  totalLiquidity: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<[amountSimplest: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "liquidity"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [liquidityShare: BigNumberish],
    [[bigint, bigint] & { amountSimplest: bigint; amountETH: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveETH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reserveSimplest"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "simplestToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [tokenIn: AddressLike, amountIn: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "totalLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "Swap(address,address,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
  };
}
